!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/honey/minishell42/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
${NAME}	Makefile	/^${NAME}: make_libftprintf make_libft$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -lreadline -g3 -fsanitize=address $/;"	m
DEBUG_NAME	Makefile	/^DEBUG_NAME = a.out$/;"	m
HEADERS	Makefile	/^HEADERS = include$/;"	m
INCLUDES	Makefile	/^INCLUDES = -I.\/$(HEADERS) $(LIBS) -I.\/$(LIBFTPRINTF_DIR) -I.\/$(LIBFT_DIR)$/;"	m
LIBFTPRINTF_AR	Makefile	/^LIBFTPRINTF_AR = libftprintf.a$/;"	m
LIBFTPRINTF_DIR	Makefile	/^LIBFTPRINTF_DIR = libftprintf\/$/;"	m
LIBFT_AR	Makefile	/^LIBFT_AR = libft.a$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR = libft\/$/;"	m
LIBS	Makefile	/^LIBS = $(LIBFTPRINTF_DIR)$(LIBFTPRINTF_AR) $(LIBFT_DIR)$(LIBFT_AR)$/;"	m
NAME	Makefile	/^NAME = minishell$/;"	m
OBJS	Makefile	/^OBJS := ${SRCS:c=o}$/;"	m
SRCS	Makefile	/^SRCS = main.c prompting.c utils.c init.c debug.c split.c matrix.c$/;"	m
all	Makefile	/^all: ${NAME}$/;"	t
check_error	prompting.c	/^int	check_error(t_data *param)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
copy_env	init.c	/^char	**copy_env(char **envp, int add)$/;"	f	typeref:typename:char **
ctags	Makefile	/^ctags:$/;"	t
debug	Makefile	/^debug: debugfile$/;"	t
debugfile	Makefile	/^debugfile: ctags$/;"	t
fclean	Makefile	/^fclean: clean$/;"	t
free_matrix_line	matrix.c	/^char	**free_matrix_line(char **matrix, int line_nb)$/;"	f	typeref:typename:char **
ft_append_tab	matrix.c	/^char	**ft_append_tab(char **matrix, char *str)$/;"	f	typeref:typename:char **
ft_insert_line	matrix.c	/^char	**ft_insert_line(char **main_matrix, char *insert_matrix, int line_nb)$/;"	f	typeref:typename:char **
ft_is_quoted	utils.c	/^int	ft_is_quoted(char *c, int i)$/;"	f	typeref:typename:int
ft_matrixlen	matrix.c	/^int	ft_matrixlen(char **matrix)$/;"	f	typeref:typename:int
ft_split_mini	ft_split_mini.c	/^char		**ft_split_mini(char *s, char c)$/;"	f	typeref:typename:char **
ft_split_mini	split.c	/^char		**ft_split_mini(char *s, char c)$/;"	f	typeref:typename:char **
ft_split_strsep	split.c	/^char	**ft_split_strsep(char *str, char *sep, int is_char)$/;"	f	typeref:typename:char **
get_input	prompting.c	/^int	get_input(t_data *param)$/;"	f	typeref:typename:int
init_param	init.c	/^t_data	*init_param(char **envp)$/;"	f	typeref:typename:t_data *
is_bonus	prompting.c	/^static int	is_bonus(char *str, int i)$/;"	f	typeref:typename:int	file:
line_not_finished	prompting.c	/^static int	line_not_finished(char *line)$/;"	f	typeref:typename:int	file:
main	main.c	/^int main(int argc, char **argv, char **envp)$/;"	f	typeref:typename:int
make_libft	Makefile	/^make_libft:$/;"	t
make_libftprintf	Makefile	/^make_libftprintf:$/;"	t
number_str	ft_split_mini.c	/^static int	number_str(char *s, char c)$/;"	f	typeref:typename:int	file:
parser	parser.c	/^void		parser(t_data *param)$/;"	f	typeref:typename:void
print_tab	matrix.c	/^void	print_tab(char **tableau)$/;"	f	typeref:typename:void
re	Makefile	/^re: fclean all$/;"	t
read_multilines	prompting.c	/^char	*read_multilines(char *prompt)$/;"	f	typeref:typename:char *
set_mat	ft_split_mini.c	/^static void	set_mat(char **mat, char *s, char c, int n)$/;"	f	typeref:typename:void	file:
set_str_len	ft_split_mini.c	/^static int	set_str_len(char *s, char c)$/;"	f	typeref:typename:int	file:
test	Makefile	/^test: ctags$/;"	t
